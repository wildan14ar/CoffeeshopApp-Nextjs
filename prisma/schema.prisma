generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  MEMBER
  ADMIN
  MANAGER
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
  FAILED
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  EXPIRED
}

enum CouponType {
  FIXED
  PERCENT
}

model User {
  id             String             @id @default(cuid())
  fullName       String?
  userName       String             @unique
  email          String             @unique
  hashedPassword String?
  role           UserRole           @default(USER)

  userProfile    UserProfile?
  store          Store?
  carts          Cart[]
  orders         Order[]
  reviews        ReviewProduct[]
  transactions   Transaction[]
  wishlist       Wishlist[]
  points         PointTransaction[]
  subscriptions  Subscription[]

  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  SupportTicket SupportTicket[]

  Coupon Coupon[] @relation("UserCoupons")
}

model UserProfile {
  id        String    @id @default(cuid())
  userId    String    @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  gender    String?
  birthDate DateTime?
  phone     String?
  address   String?
  city      String?
  state     String?
  zip       String?

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Store {
  id          String        @id @default(cuid())
  userId      String        @unique
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  imageUrl    String?

  user         User          @relation(fields: [userId], references: [id])
  details      StoreDetails?
  products     Product[]
  orders       Order[]
  carts        Cart[]
  transactions Transaction[]

  @@index([name])
}

model StoreDetails {
  id        String  @id @default(cuid())
  storeId   String  @unique
  latitude  String?
  longitude String?
  whatsapp  String?
  instagram String?
  facebook  String?

  store     Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model Product {
  id          String                 @id @default(cuid())
  storeId     String
  name        String
  description String?
  basePrice   Float
  imageUrl    String?
  preOrder    Boolean                @default(false)
  preOrderETA DateTime?

  store       Store                  @relation(fields: [storeId], references: [id])
  options     ProductOption[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     ReviewProduct[]
  categories  CategoriesOnProducts[]
  attachments ProductAttachment[]
  views       ViewProduct[]

  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  @@index([name])
  ProductTranslation ProductTranslation[]
  Subscription Subscription[]
  Promotion Promotion[]
  Wishlist Wishlist[]
}
model ProductAttachment {
  id          String               @id @default(cuid())
  productId   String
  name        String
  description String?
  imageUrl    String

  product     Product              @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model ProductOption {
  id          String               @id @default(cuid())
  productId   String
  name        String
  description String?

  product     Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  values      ProductOptionValue[]

  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model ProductOptionValue {
  id              String               @id @default(cuid())
  optionId        String
  value           String
  additionalPrice Float                @default(0.0)

  option          ProductOption        @relation(fields: [optionId], references: [id], onDelete: Cascade)
  orderItemOpts   OrderItemOption[]
  cartItemOpts    CartItemOption[]

  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}

model Cart {
  id        String      @id @default(cuid())
  userId    String
  storeId   String

  user      User        @relation(fields: [userId], references: [id])
  store     Store       @relation(fields: [storeId], references: [id])
  cartItems CartItem[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  @@unique([userId, storeId])
}

model CartItem {
  id        String            @id @default(cuid())
  cartId    String
  productId String
  quantity  Int               @default(1)

  cart      Cart              @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product           @relation(fields: [productId], references: [id])
  options   CartItemOption[]

  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model CartItemOption {
  id            String               @id @default(cuid())
  cartItemId    String
  optionValueId String

  cartItem      CartItem             @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
  optionValue   ProductOptionValue   @relation(fields: [optionValueId], references: [id])
}

model Order {
  id        String            @id @default(cuid())
  userId    String
  storeId   String
  status    OrderStatus       @default(PENDING)

  user      User              @relation(fields: [userId], references: [id])
  store     Store             @relation(fields: [storeId], references: [id])
  orderItems OrderItem[]
  transactions Transaction[]

  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  Coupon Coupon[] @relation("CouponUsage")
}

model OrderItem {
  id        String             @id @default(cuid())
  orderId   String
  productId String
  quantity  Int                @default(1)
  price     Float

  order     Order              @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product            @relation(fields: [productId], references: [id])
  options   OrderItemOption[]
}

model OrderItemOption {
  id            String            @id @default(cuid())
  orderItemId   String
  optionValueId String

  orderItem     OrderItem         @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  optionValue   ProductOptionValue@relation(fields: [optionValueId], references: [id])
}

model Transaction {
  id              String            @id @default(cuid())
  orderId         String            @unique
  userId          String
  storeId         String
  amount          Float
  status          TransactionStatus @default(PENDING)
  paymentProvider String?
  paymentToken    String?           @unique

  order   Order  @relation(fields: [orderId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
  store   Store  @relation(fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReviewProduct {
  id       String    @id @default(cuid())
  userId   String
  productId String
  favorite Boolean   @default(false)
  rating   Int       @default(0)
  message  String?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product  Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attachments ReviewAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, productId])
}

model ReviewAttachment {
  id       String @id @default(cuid())
  reviewId String
  url      String

  review   ReviewProduct @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Blogs {
  id          String              @id @default(cuid())
  title       String
  description String
  imageUrl    String
  content     String

  categories  CategoriesOnBlogs[]
  attachments BlogAttachment[]

  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model BlogAttachment {
  id          String @id @default(cuid())
  blogId      String
  name        String
  description String?
  imageUrl    String

  blog        Blogs  @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

model Category {
  id          String              @id @default(cuid())
  name        String              @unique
  description String?
  imageUrl    String?

  products    CategoriesOnProducts[]
  blogs       CategoriesOnBlogs[]
}

model CategoriesOnProducts {
  product    Product   @relation(fields: [productId], references: [id])
  productId  String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  assignedAt DateTime  @default(now())

  @@id([productId, categoryId])
}

model CategoriesOnBlogs {
  blog       Blogs     @relation(fields: [blogId], references: [id])
  blogId     String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  assignedAt DateTime  @default(now())

  @@id([blogId, categoryId])
}

model Coupon {
  id            String     @id @default(cuid())
  code          String     @unique
  type          CouponType
  amount        Float
  minPurchase   Float?     
  usageLimit    Int?       
  expireAt      DateTime

  orders        Order[]    @relation("CouponUsage")
  users         User[]     @relation("UserCoupons")
}

model Wishlist {
  id        String    @id @default(cuid())
  userId    String
  productId String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  @@unique([userId, productId])
}

model PointTransaction {
  id         String    @id @default(cuid())
  userId     String
  change     Int
  type       String
  reference  String?

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
}

model ViewProduct {
  id         String    @id @default(cuid())
  productId  String
  viewedAt   DateTime  @default(now())
  sessionId  String?

  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Promotion {
  id        String    @id @default(cuid())
  name      String
  discount  Float
  startAt   DateTime
  endAt     DateTime
  quota     Int?

  products  Product[]
}

model Subscription {
  id           String    @id @default(cuid())
  userId       String
  productId    String
  intervalDays Int
  nextOrderAt  DateTime
  active       Boolean   @default(true)

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product      Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model SupportTicket {
  id          String    @id @default(cuid())
  userId      String
  subject     String
  message     String
  status      String    @default("open")

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Locale {
  id         String    @id @default(cuid())
  code       String    @unique
  name       String
  currency   String

  translations ProductTranslation[]
}

model ProductTranslation {
  id         String    @id @default(cuid())
  productId  String
  localeId   String
  title      String
  description String

  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  locale     Locale    @relation(fields: [localeId], references: [id], onDelete: Cascade)
  @@unique([productId, localeId])
}

model CurrencyRate {
  id         String    @id @default(cuid())
  from       String
  to         String
  rate       Float
  updatedAt  DateTime  @default(now())
  @@unique([from, to])
}
