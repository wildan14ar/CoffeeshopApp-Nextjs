// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String      @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Products {
  id            Int     @id @default(autoincrement())
  name          String
  price         Int
  stock         Int
  description   String?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model Order {
  id            Int     @id @default(autoincrement())
  userId        String
  productsId    Int
  quantity      Int
  total         Int
  status        String
  address       String
  paymentMethod String
  paymentDate   DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productsId], references: [id])
}