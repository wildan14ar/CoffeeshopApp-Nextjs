// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String      @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  base_price  Float
  image_url   String?
  options     ProductOption[]
  orderItems  OrderItem[]   // Relasi berlawanan dengan OrderItem
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProductOption {
  id          Int                @id @default(autoincrement())
  name        String
  product     Product             @relation(fields: [productId], references: [id])
  productId   Int
  values      ProductOptionValue[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model ProductOptionValue {
  id             Int                 @id @default(autoincrement())
  value          String
  additional_price Float              @default(0.00)
  option         ProductOption        @relation(fields: [optionId], references: [id])
  optionId       Int
  orderItemOptions OrderItemOption[]  // Relasi berlawanan dengan OrderItemOption
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model Order {
  id          Int          @id @default(autoincrement())
  customer_name String
  total_price Float
  status      String       @default("pending")
  items       OrderItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model OrderItem {
  id          Int         @id @default(autoincrement())
  order       Order       @relation(fields: [orderId], references: [id])
  orderId     Int
  product     Product     @relation(fields: [productId], references: [id])
  productId   Int
  quantity    Int         @default(1)
  price       Float
  options     OrderItemOption[]
  createdAt   DateTime    @default(now())
}

model OrderItemOption {
  id             Int               @id @default(autoincrement())
  orderItem      OrderItem         @relation(fields: [orderItemId], references: [id])
  orderItemId    Int
  optionValue    ProductOptionValue @relation(fields: [optionValueId], references: [id])
  optionValueId  Int
  additional_price Float            @default(0.00)
}
