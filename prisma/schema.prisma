// Prisma schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

enum UserRole {
  USER
  OWNER
  MANAGER
}

// Model User
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accounts      Account[]
  sessions      Session[]
  stores        Store[]
  role          UserRole @default(USER)
}

// Model Account
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Model Session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Model VerificationToken
model VerificationToken {
  identifier String
  token      String      @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Model Store
model Store {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  image_url   String?
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  details     StoreDetails?
  products    Product[]
}

// Model StoreDetails
model StoreDetails {
  id          Int         @id @default(autoincrement())
  latitude    Float?
  longitude   Float?
  whatsapp    String?
  instagram   String?
  facebook    String?
  storeId     Int         @unique
  store       Store       @relation(fields: [storeId], references: [id]) 
}

// Model Product
model Product {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  base_price  Float
  image_url   String?
  options     ProductOption[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  store       Store         @relation(fields: [storeId], references: [id])
  storeId     Int
}

// Model ProductOption
model ProductOption {
  id          Int                @id @default(autoincrement())
  name        String
  product     Product             @relation(fields: [productId], references: [id])
  productId   Int
  values      ProductOptionValue[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

// Model ProductOptionValue
model ProductOptionValue {
  id             Int                 @id @default(autoincrement())
  value          String
  additional_price Float              @default(0.00)
  option         ProductOption        @relation(fields: [optionId], references: [id])
  optionId       Int
  orderItemOptions OrderItemOption[]  // Relasi ke OrderItemOption
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

// Model Cart
model Cart {
  id          Int          @id @default(autoincrement())
  userId      Int?
  items       CartItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Model CartItem
model CartItem {
  id          Int          @id @default(autoincrement())
  cart        Cart         @relation(fields: [cartId], references: [id])
  cartId      Int
  product     Product      @relation(fields: [productId], references: [id])
  productId   Int
  quantity    Int          @default(1)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Model Order
model Order {
  id          Int          @id @default(autoincrement())
  userId      Int?
  totalPrice  Float
  status      String       @default("pending") // pending, paid, shipped, delivered
  items       OrderItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Model OrderItem
model OrderItem {
  id          Int          @id @default(autoincrement())
  order       Order        @relation(fields: [orderId], references: [id])
  orderId     Int
  product     Product      @relation(fields: [productId], references: [id])
  productId   Int
  quantity    Int          @default(1)
  price       Float
  orderItemOptions OrderItemOption[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Model OrderItemOption
model OrderItemOption {
  id             Int               @id @default(autoincrement())
  orderItem      OrderItem         @relation(fields: [orderItemId], references: [id])
  orderItemId    Int
  optionValue    ProductOptionValue @relation(fields: [optionValueId], references: [id])
  optionValueId  Int
  additional_price Float            @default(0.00)
}

// Model Image
model Image {
  id        Int      @id @default(autoincrement())
  fileName  String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
