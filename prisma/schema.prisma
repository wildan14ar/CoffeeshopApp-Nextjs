// Prisma schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

// Model Image
model Image {
  id        Int      @id @default(autoincrement())
  fileName  String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  OWNER
  MANAGER
}

// Model User
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accounts      Account[]
  sessions      Session[]
  stores        Store[]
  role          UserRole @default(USER)
  carts         Cart[]    // Relasi ke Cart
  orders        Order[]   // Relasi ke Order
  reviews       ReviewProduct[]
}


// Model Account
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Model Session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Model VerificationToken
model VerificationToken {
  identifier String
  token      String      @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Model Store
model Store {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  address     String?
  phone       String?
  email       String?
  image_url   String?
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  details     StoreDetails?
  products    Product[]
  orders      Order[]      // Relasi ke Order
}

// Model StoreDetails
model StoreDetails {
  id          Int         @id @default(autoincrement())
  latitude    String?
  longitude   String?
  whatsapp    String?
  instagram   String?
  facebook    String?
  storeId     Int         @unique
  store       Store       @relation(fields: [storeId], references: [id]) 
}

// Model Product
model Product {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  base_price  Float
  image_url   String?
  options     ProductOption[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  store       Store         @relation(fields: [storeId], references: [id])
  storeId     Int
  reviews     ReviewProduct[] 
}

// Model ProductOption
model ProductOption {
  id          Int                @id @default(autoincrement())
  name        String
  product     Product             @relation(fields: [productId], references: [id])
  productId   Int
  values      ProductOptionValue[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

// Model ProductOptionValue
model ProductOptionValue {
  id                Int                 @id @default(autoincrement())
  value             String
  additional_price  Float               @default(0.00)
  option            ProductOption       @relation(fields: [optionId], references: [id])
  optionId          Int
  orderItemOptions  OrderItemOption[]  // Relation to OrderItemOption
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  cartItemOptions   CartItemOption[]   // Relation to CartItemOption
}

// Model Cart
model Cart {
  id        Int      @id @default(autoincrement())
  userId    String   @unique // Setiap user hanya bisa memiliki satu cart
  user      User     @relation(fields: [userId], references: [id])
  cartItems CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Model CartItem
model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int      @default(1)
  totalBasePrice Float  // Total base price dari product * quantity
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  options   CartItemOption[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Model CartItemOption
model CartItemOption {
  id             Int                @id @default(autoincrement())
  cartItemId     Int
  optionValueId  Int
  cartItem       CartItem           @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
  optionValue    ProductOptionValue @relation(fields: [optionValueId], references: [id])
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

// Model Order
model Order {
  id          Int          @id @default(autoincrement())
  userId      String    // Pastikan ini bertipe Int jika merujuk ke id User
  user        User   @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  totalPrice  Float        // Total harga dari semua item di order
  status      String       // Status dari pesanan (e.g., 'pending', 'paid', 'shipped')
  storeId     Int          // Tambahkan field ini untuk relasi ke Store
  store       Store        @relation(fields: [storeId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  transactions Transaction[] // Relasi ke transaksi pembayaran
}


// Model OrderItem
model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int      @default(1)
  price     Float    // Total harga dari item ini
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  options   OrderItemOption[]
}

// Model OrderItemOption
model OrderItemOption {
  id            Int                @id @default(autoincrement())
  orderItemId   Int
  optionValueId Int
  orderItem     OrderItem          @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  optionValue   ProductOptionValue @relation(fields: [optionValueId], references: [id])
}

// Model Transaction
model Transaction {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  amount    Float    // Total pembayaran
  status    String   // Status transaksi (e.g., 'pending', 'paid', 'failed')
  paymentProvider String // e.g., 'Xendit'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enum for Blog Categories
enum BlogCategory {
  News
  Howto
  Programs
}

// Model Blogs
model Blogs {
  id          String       @id @default(cuid())
  name        String
  description String
  image_url   String
  content     String       
  category    BlogCategory // Menambahkan kategori untuk blog
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Model ReviewProduct
model ReviewProduct {
  id        String   @id @default(cuid())
  userId    String
  productId Int
  favorite  Boolean  @default(false)
  review    Int      @default(0) // Nilai review, bisa disesuaikan rentangnya (misal 1-5)
  message   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi dengan User
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relasi dengan Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // Setiap user hanya bisa memberi review satu kali untuk setiap produk
}
